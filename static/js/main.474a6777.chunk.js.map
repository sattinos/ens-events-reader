{"version":3,"sources":["../node_modules/in3/js/src/client sync","../node_modules/ethereumjs-vm/dist sync","model/connectionStatus.ts","lib/view/simpleTable/index.tsx","lib/view/autoHeadersTable/index.tsx","view/connectionSensor/index.tsx","lib/controller/localizer.ts","lib/view/flexRow/index.tsx","lib/view/digitsInput/index.tsx","lib/view/optionsInput/index.tsx","lib/view/loadingIndicator/index.tsx","assets/localization.ts","config.ts","controller/appController.ts","view/languageDropMenu/index.tsx","view/app/App.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","ConnectionStatus","renderArrayAsTableRow","words","isHeader","renderKey","renderedWords","index","length","word","push","react_default","a","createElement","key","concat","SimpleTable","props","renderedHeader","headers","renderedRows","rows","renderedHeaders","header","AutoHeadersTable","entity","_","rowIndex","propRow","row","keyIndex","simpleTable","Language","connectionStatusMapping","_connectionStatusMapp","Object","defineProperty","Connecting","Offline","Online","cssClassMapping","_cssClassMapping","ConnectionSensor","className","status","style","margin","display","flexDirection","alignItems","FlexRow","flex","flexLeft","leftColumn","flexRight","rightColumn","DigitsInput","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","_ref","number","target","value","digit","onChange","state","s","react","type","pattern","placeholder","placeHolder","readOnly","React","OptionsInput","_callee","element","activeIndex","regenerator_default","wrap","_context","prev","next","OnOptionSelected","parseInt","stop","options","map","option","name","title","LoadingIndicator","visible","texts","connectorLabel","connectBtn","readEvents","readBtn","blockesPerDay","blockesPerDayPlaceholder","limit","limitPlaceHolder","fromBlock","fromBlockNumber","toBlock","toBlockNumber","fromBlockNumberPlaceHolder","toBlockNumberPlaceHolder","contractAddress","results","languageOptions","localizer","_languageIndex","english","console","log","err","language","config","Config","_in3AppConfig","_appName","defaultTimeout","nameRegisteredSmartContractABI","anonymous","inputs","indexed","dateFormatMask","appController","_in3Client","undefined","_lastBlockNumber","_contractObject","_connectionStatus","setup","updateView","In3Client","proof","signatureCount","requestCount","chainId","timeout","In3AppConfig","eth","blockNumber","sent","contractAt","t0","error","LanguageDropMenu","onOptionChoosen","currentLanguage","optionsInput_OptionsInput","blockOptions","App","renderEnsEvents","logs","text","autoHeadersTable","renderLabel","onReadEnsEventsTapped","asyncToGenerator","mark","extendedLogs","item","setState","isBusy","getFromBlock","getToBlock","contractObject","events","NameRegistered","getLogs","owner","cost","expiryDate","format","Date","expires","toNumber","onForceReconnectClicked","_callee2","_context2","onLimitChange","_ref3","_callee3","_context3","_x","apply","arguments","onBlocksPerDayChange","_ref4","_callee4","blocksPerDay","_context4","_x2","onFromChanged","fromBlockIndex","onToChanged","toBlockIndex","onFromBlockNumberChange","toBlockNumberChange","forceUpdate","bind","languageDropMenu","flexRow","connectionSensor","connectionStatus","onClick","digitsInput","renderCustomFromBlockNumber","renderCustomToBlockNumber","loadingIndicator","Component","ReactDOM","render","view_app_App","document","getElementById"],"mappings":"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","file":"static/js/main.474a6777.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 405;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 613;","export enum ConnectionStatus {\n    Connecting,\n    Offline,\n    Online\n};","import React from 'react';\n\nexport interface SimpleTableProps {\n    headers: string[];\n    rows: string[][];\n}\n\nconst renderArrayAsTableRow = (words: string[], isHeader: boolean, renderKey?: string): JSX.Element => {\n    const renderedWords: JSX.Element[] = [];\n    for (let index = 0; index < words.length; index++) {\n        const word = words[index];\n        if (isHeader) {\n            renderedWords.push(\n                <th key={`header_${index}_${word}`}>{word}</th>\n            );\n        } else {\n            renderedWords.push(\n                <td key={`row_${index}_${word}`}>{word}</td>\n            );\n        }\n    }\n    return (\n        <tr key={renderKey}>{renderedWords}</tr>\n    );\n}\n\nconst SimpleTable: React.SFC<SimpleTableProps> = (props: SimpleTableProps) => {\n    const renderedHeader = renderArrayAsTableRow(props.headers, true);\n    const renderedRows: JSX.Element[] = [];\n    for (let index = 0; index < props.rows.length; index++) {\n        renderedRows.push(\n            renderArrayAsTableRow(props.rows[index], false, `row_${index}`)\n        );\n    }\n    const renderedHeaders: JSX.Element[] = [];\n    for (let index = 0; index < props.headers.length; index++) {\n        const header = props.headers[index];\n        renderedHeaders.push(\n            <th key={`header_${index}_${header}`}>{header}</th>\n        );\n    }\n    return (\n        <table>\n            <tbody>\n                {renderedHeader}\n                {renderedRows}\n            </tbody>\n        </table>\n    );\n}\n\nexport default SimpleTable;\n","import React from 'react';\n\nimport * as _ from 'lodash';\nimport SimpleTable from '../simpleTable';\n\nexport interface AutoHeadersTableProps {\n    rows: any[];\n}\n\nconst AutoHeadersTable: React.SFC<AutoHeadersTableProps> = (props: AutoHeadersTableProps) => {\n    if ((!props.rows) || (props.rows.length === 0)) {\n        return null;\n    }\n\n    const entity = props.rows[0];\n    const keys = _.keys(entity);\n    const rows: string[][] = [];\n    for (let rowIndex = 0; rowIndex < props.rows.length; rowIndex++) {\n        const propRow = props.rows[rowIndex];\n        const row: string[] = [];\n        for (let keyIndex = 0; keyIndex < keys.length; keyIndex++) {\n            const key = keys[keyIndex];\n            row.push(propRow[key]);\n        }\n        rows.push(row);\n    }\n    return (\n        <SimpleTable headers={keys} rows={rows} />\n    );\n}\n\nexport default AutoHeadersTable;\n","import React from 'react';\nimport './style.css';\n\nimport { ConnectionStatus } from \"../../model/connectionStatus\";\n\nexport interface ConnectionSensorProps {\n    status: ConnectionStatus;\n}\n\nconst connectionStatusMapping = {\n    [ConnectionStatus.Connecting]: 'Connecting...',\n    [ConnectionStatus.Offline]: 'Offline',\n    [ConnectionStatus.Online]: 'Online'\n}\n\nconst cssClassMapping = {\n    [ConnectionStatus.Connecting]: 'connecting',\n    [ConnectionStatus.Offline]: 'offline',\n    [ConnectionStatus.Online]: 'online'\n}\n\nconst ConnectionSensor: React.SFC<ConnectionSensorProps> = (props: ConnectionSensorProps) => {\n    return (\n        <div className={`${cssClassMapping[props.status]}`} id='connectionStatusDiv-3nsKHRBL'>{connectionStatusMapping[props.status]}</div>\n    );\n}\n\nexport default ConnectionSensor;\n","import { texts } from \"../../assets/localization\";\n\nexport interface LocalizationDictionary {\n  [index: string]: string[]\n}\n\nexport enum Language {\n    english,\n    deutsch\n}\n\nexport const languageOptions = [\n    'english',\n    'deutsch'\n];\n\nclass Localizer {\n    private _languageIndex: Language = Language.english;\n\n    public set currentLanguage(language: Language) {\n        this._languageIndex = language;\n    }\n\n    public get currentLanguage(): Language {\n        return this._languageIndex;\n    }\n\n    public text(key: string): string {\n        try {\n            if (texts[key][this._languageIndex]) {\n                return texts[key][this._languageIndex];\n            }\n            console.log(`failed to find localization text for key: ${key}`);\n            return key;\n        } catch (err) {\n            console.log('localization text(err): ', err);\n            return key;\n        }\n    }\n}\nconst localizer = new Localizer();\nexport default localizer;\n","import React from 'react';\n\nexport interface FlexRowProps {\n    flexLeft: number;\n    flexRight: number;\n    leftColumn: JSX.Element\n    rightColumn: JSX.Element\n}\n\nconst style = {\n    margin: '10px 0px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center'\n}\n\nconst FlexRow: React.SFC<FlexRowProps> = (props: FlexRowProps) => {\n    return (\n        <div style={style as any}>\n            <div style={{ flex: props.flexLeft }}>\n                {props.leftColumn}\n            </div>\n            <div style={{ flex: props.flexRight }}>\n                {props.rightColumn}\n            </div>\n        </div>\n    );\n}\n\nexport default FlexRow;\n","import * as React from 'react';\n\nexport interface DigitsInputProps {\n    id?: string;\n    className: string;\n    value: number;\n    placeHolder: string;\n    readOnly?: boolean;\n    onChange: (number: number) => void;\n}\n\nexport interface DigitsInputState {\n    s?: string;\n}\n\nclass DigitsInput extends React.Component<DigitsInputProps, DigitsInputState> {\n    constructor(props: DigitsInputProps) {\n        super(props);\n        this.state = { s: '' };\n    }\n    public render() {\n        return <input className={this.props.className} id={this.props.id}\n            type='tel'\n            pattern='[0-9]*'\n            value={this.props.value}\n            placeholder={this.props.placeHolder}\n            readOnly={this.props.readOnly || false}\n            onChange={this.onChangeHandler} />;\n    }\n\n    private onChangeHandler = ({ target }: any) => {\n        let number = target.value;\n        if (number === '') {\n            this.props.onChange(number);\n            return;\n        }\n        for (let index = 0; index < number.length; index++) {\n            const digit = number[index];\n            if ((digit <= '9') && (digit >= '0')) {\n                continue;\n            }\n            return;\n        }\n        this.props.onChange(number);\n    }\n}\n\nexport default DigitsInput;\n","import * as React from 'react';\n\nexport interface OptionsInputProps {\n    title: string;\n    options: string[];\n    index: number;\n    id?: string;\n    className?: string;\n    OnOptionSelected: (index: number) => void;\n}\n\nexport default class OptionsInput extends React.Component<OptionsInputProps, {}> {\n    public render() {\n        const options = this.props.options.map((option: string, index: number) =>\n            <option value={index} key={index}>{option}</option>\n        );\n        return (\n            <select\n                id={this.props.id}\n                className={this.props.className}\n                name={this.props.title}\n                onChange={this.onChange}\n                value={this.props.index}\n            >\n                {options}\n            </select>\n        );\n    }\n\n    private onChange = async (element: any) => {\n        const activeIndex = element.target.value;\n        this.props.OnOptionSelected(parseInt(activeIndex, 10));\n    }\n}\n","import React from 'react';\nimport './style.css';\n\nexport interface LoadingIndicatorProps {\n    visible: boolean;\n}\n\nconst LoadingIndicator: React.SFC<LoadingIndicatorProps> = (props: LoadingIndicatorProps) => {\n    if (!props.visible) {\n        return null;\n    }\n    return (\n        <div className='LoaderBG'>\n            <div className='LoaderContainer'>\n                <div className='Loader' />\n            </div>\n        </div>\n    );\n}\n\nexport default LoadingIndicator;","import { LocalizationDictionary } from \"../lib/controller/localizer\";\n\nexport const texts: LocalizationDictionary = {\n  title: ['ENS Events Reader', 'ENS Ereignisleser'],\n  connectorLabel: ['Connectionn Status', 'Verbindungsstatus'],\n  connectBtn: ['Re-Connect', 'wieder verbinden'],\n  readEvents: ['Read ENS Events', 'ENS-Ereignis lesen'],\n  readBtn: ['Start Reading', 'Anfangen zu lesen'],\n  blockesPerDay: ['Blocks per day', 'Blöcke pro Tag'],\n  blockesPerDayPlaceholder: ['Enter the approximate generated blocks per day', 'Geben Sie die ungefähre anzahl der generierten Blöcke pro Tag ein'],\n  limit: ['Events count limit', 'limit der Events'],\n  limitPlaceHolder: ['Limit the results count here', 'Beperk het aantal resultaten hier'],\n  fromBlock: ['From Block', 'vom Block'],\n  fromBlockNumber: ['From Block Number', 'von Blocknummer'],\n  toBlock: ['To Block', 'zum Block'],\n  toBlockNumber: ['To Block Number', 'Zur Blocknummer'],\n  fromBlockNumberPlaceHolder: ['enter the number of the block you want events to start from', 'Geben Sie die nummer des Blocks ein, von dem aus die Ereignisse beginnen sollen'],\n  toBlockNumberPlaceHolder: ['enter the number of the block you want events to finish at', 'Geben Sie die nummer des Blocks ein, von dem aus die Ereignisse enden sollen'],\n  contractAddress: ['Contract Address', 'vertrag Adresse'],\n  results: ['Events Found', 'gefundene Ereignisse']\n};\n","import { Address, ABI } from 'in3/js/src/modules/eth/api';\n\ninterface In3AppConfig {\n    defaultTimeout: number;\n    contractAddress: Address;\n    nameRegisteredSmartContractABI: ABI[];\n    dateFormatMask: string;\n}\n\nclass Config {\n    private _in3AppConfig: In3AppConfig;\n    private _appName = 'ENS Events Readers';\n\n    constructor() {\n        this._in3AppConfig = {\n            defaultTimeout: 50000,\n            contractAddress: '0xF0AD5cAd05e10572EfcEB849f6Ff0c68f9700455',\n            nameRegisteredSmartContractABI: [\n                {\n                    anonymous: false,\n                    inputs: [\n                        { indexed: false, name: 'name', type: 'string' },\n                        { indexed: true, name: 'label', type: 'bytes32' },\n                        { indexed: true, name: 'owner', type: 'address' },\n                        { indexed: false, name: 'cost', type: 'uint256' },\n                        { indexed: false, name: 'expires', type: 'uint256' },\n                    ],\n                    name: 'NameRegistered',\n                    type: 'event'\n                }\n            ],\n            dateFormatMask: 'MM/DD/YYYY HH:mm:ssaa'\n        };\n    }\n\n    public get In3AppConfig() {\n        return this._in3AppConfig;\n    }\n\n    public get AppName() {\n        return this._appName;\n    }\n}\nconst config = new Config();\nexport default config;\n","import In3Client from 'in3';\nimport config from '../config';\nimport { ConnectionStatus } from '../model/connectionStatus';\n\nclass AppController {\n    private _in3Client: In3Client | undefined = undefined;\n    private _lastBlockNumber: number = -1;\n    private _contractObject: any = undefined;\n    private _connectionStatus: ConnectionStatus = ConnectionStatus.Offline;\n\n    public setup = async () => {\n        try {\n            this._connectionStatus = ConnectionStatus.Connecting;\n            this.updateView();\n            this._in3Client = new In3Client({\n                proof: 'none',\n                signatureCount: 1,\n                requestCount: 2,\n                chainId: 'mainnet',\n                timeout: config.In3AppConfig.defaultTimeout\n            });\n            if (this._in3Client) {\n                this._lastBlockNumber = await this._in3Client.eth.blockNumber();\n                this._contractObject = this._in3Client.eth.contractAt(config.In3AppConfig.nameRegisteredSmartContractABI, config.In3AppConfig.contractAddress);\n                this._connectionStatus = ConnectionStatus.Online;\n            } else {\n                this._connectionStatus = ConnectionStatus.Offline;\n            }\n            this.updateView();\n        } catch (error) {\n            console.error('failed during connection: ', error);\n            this._connectionStatus = ConnectionStatus.Offline;\n            this.updateView();\n        }\n    }\n\n    public get isConnected() {\n        return (this._in3Client !== null) && (this._connectionStatus === ConnectionStatus.Online);\n    }\n\n    public get lastBlockNumber() {\n        return this._lastBlockNumber;\n    }\n\n    public get contractObject() {\n        return this._contractObject;\n    }\n\n    public get connectionStatus() {\n        return this._connectionStatus;\n    }\n\n    public updateView = () => {\n        //\n    }\n}\n\nexport const appController = new AppController();\n","import * as React from 'react';\nimport localizer, { languageOptions } from \"../../lib/controller/localizer\";\nimport { appController } from '../../controller/appController';\nimport OptionsInput from '../../lib/view/optionsInput';\n\nclass LanguageDropMenu extends React.Component<{}, {}> {\n    public render() {\n        return (\n            <div>\n                <OptionsInput index={localizer.currentLanguage} title='' OnOptionSelected={this.onOptionChoosen} options={languageOptions} />\n            </div>\n        );\n    }\n\n    public onOptionChoosen = (index: number) => {\n        localizer.currentLanguage = index;\n        appController.updateView();\n    }\n}\n\nexport default LanguageDropMenu;","import React from 'react';\nimport './App.css';\nimport '../commonStyles.css';\n\nimport { LogEntity } from '../../model/logEntity';\nimport { format } from 'date-fns'\n\nimport AutoHeadersTable from '../../lib/view/autoHeadersTable';\nimport ConnectionSensor from '../connectionSensor';\nimport FlexRow from '../../lib/view/flexRow';\nimport DigitsInput from '../../lib/view/digitsInput';\nimport OptionsInput from '../../lib/view/optionsInput';\nimport LoadingIndicator from '../../lib/view/loadingIndicator';\nimport LanguageDropMenu from '../languageDropMenu';\nimport { appController } from '../../controller/appController';\nimport localizer from '../../lib/controller/localizer';\n\nimport config from '../../config';\n\nexport interface AppState {\n  logs: LogEntity[];\n  blocksPerDay: number;\n  limit: number;\n  fromBlockIndex: number;\n  toBlockIndex: number;\n  fromBlockNumber: number;\n  toBlockNumber: number;\n  isBusy: boolean;\n}\n\nconst blockOptions = [\n  'latest', 'earliest', 'pending', 'custom'\n];\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      isBusy: false,\n      blocksPerDay: 12000,\n      limit: 5,\n      fromBlockIndex: 1,\n      toBlockIndex: 0,\n      fromBlockNumber: 0,\n      toBlockNumber: 0,\n      logs: []\n    };\n  }\n\n  public async componentDidMount() {\n    appController.updateView = this.forceUpdate.bind(this);\n    await appController.setup();\n  }\n\n  public render() {\n    return (\n      <div id=\"formDiv\">\n        <LanguageDropMenu />\n        <div id='formTitle'>{localizer.text('title')}</div>\n        <FlexRow flexLeft={6}\n          flexRight={6}\n          leftColumn={this.renderLabel(localizer.text('connectorLabel'))}\n          rightColumn={<ConnectionSensor status={appController.connectionStatus} />}\n        />\n\n        <FlexRow flexLeft={5}\n          flexRight={6}\n          leftColumn={this.renderLabel(localizer.text('connectBtn'))}\n          rightColumn={\n            <div className='center'>\n              <button className='btn' onClick={this.onForceReconnectClicked}>{localizer.text('connectBtn')}</button>\n            </div>\n          }\n        />\n\n        <FlexRow flexLeft={5}\n          flexRight={6}\n          leftColumn={this.renderLabel(localizer.text('limit'))}\n          rightColumn={\n            <div className='center'>\n              <DigitsInput className='fillContainer leftFloat' value={this.state.limit} placeHolder={localizer.text('limitPlaceHolder')} onChange={this.onLimitChange} />\n            </div>\n          }\n        />\n\n        <FlexRow flexLeft={5}\n          flexRight={6}\n          leftColumn={this.renderLabel(localizer.text('blockesPerDay'))}\n          rightColumn={\n            <div className='center'>\n              <DigitsInput className='fillContainer leftFloat' value={this.state.blocksPerDay} placeHolder={localizer.text('blockesPerDayPlaceholder')} onChange={this.onBlocksPerDayChange} />\n            </div>\n          }\n        />\n\n        <FlexRow flexLeft={5}\n          flexRight={6}\n          leftColumn={this.renderLabel(localizer.text('fromBlock'))}\n          rightColumn={\n            <div className='center'>\n              <OptionsInput className='fillContainer' OnOptionSelected={this.onFromChanged} options={blockOptions} index={this.state.fromBlockIndex} title='' />\n            </div>\n          }\n        />\n\n        {this.renderCustomFromBlockNumber()}\n\n        <FlexRow flexLeft={5}\n          flexRight={6}\n          leftColumn={this.renderLabel(localizer.text('toBlock'))}\n          rightColumn={\n            <div className='center'>\n              <OptionsInput className='fillContainer' OnOptionSelected={this.onToChanged} options={blockOptions} index={this.state.toBlockIndex} title='' />\n            </div>\n          }\n        />\n\n        {this.renderCustomToBlockNumber()}\n\n        <FlexRow flexLeft={5}\n          flexRight={6}\n          leftColumn={this.renderLabel(localizer.text('readEvents'))}\n          rightColumn={\n            <div className='center'>\n              <button className='btn' onClick={this.onReadEnsEventsTapped}>{localizer.text('readBtn')}</button>\n            </div>\n          }\n        />\n\n        {this.renderEnsEvents()}\n\n        <LoadingIndicator visible={this.state.isBusy} />\n      </div>\n    );\n  }\n\n  renderEnsEvents = () => {\n    if (this.state.logs.length === 0) {\n      return null;\n    }\n    return (\n      <div>\n        <div id='tableTitle' className='center'>{localizer.text('results')}</div>\n        <div id='tableContainer'>\n          <AutoHeadersTable rows={this.state.logs} />\n        </div>\n      </div>\n    );\n  }\n\n  renderLabel = (text: string) => {\n    return (\n      <div className='center label'>{text}</div>\n    );\n  }\n\n  renderCustomFromBlockNumber() {\n    if (this.state.fromBlockIndex === 3) {\n      return (\n        <FlexRow flexLeft={5}\n          flexRight={6}\n          leftColumn={this.renderLabel(localizer.text('fromBlockNumber'))}\n          rightColumn={\n            <div className='center'>\n              <DigitsInput className='fillContainer leftFloat' value={this.state.fromBlockNumber} placeHolder={localizer.text('fromBlockNumberPlaceHolder')} onChange={this.onFromBlockNumberChange} />\n            </div>\n          }\n        />\n      );\n    }\n    return null;\n  }\n\n  renderCustomToBlockNumber() {\n    if (this.state.toBlockIndex === 3) {\n      return (\n        <FlexRow flexLeft={5}\n          flexRight={6}\n          leftColumn={this.renderLabel(localizer.text('toBlockNumber'))}\n          rightColumn={\n            <div className='center'>\n              <DigitsInput className='fillContainer leftFloat' value={this.state.toBlockNumber} placeHolder={localizer.text('toBlockNumberPlaceHolder')} onChange={this.toBlockNumberChange} />\n            </div>\n          }\n        />\n      );\n    }\n    return null;\n  }\n\n  onReadEnsEventsTapped = async () => {\n    this.setState({\n      logs: [],\n      isBusy: true\n    });\n    const fromBlock = this.getFromBlock();\n    const toBlock = this.getToBlock();\n    const extendedLogs = await appController.contractObject.events.NameRegistered.getLogs({\n      fromBlock,\n      toBlock,\n      limit: this.state.limit\n    });\n\n    const logs: LogEntity[] = [];\n    for (let index = 0; index < extendedLogs.length; index++) {\n      const item = extendedLogs[index];\n      logs.push({\n        owner: item.owner,\n        name: item.name,\n        cost: item.cost.words[0],\n        expiryDate: format(new Date(item.expires.toNumber() * 1000), config.In3AppConfig.dateFormatMask)\n      });\n    }\n    this.setState({\n      logs,\n      isBusy: false\n    });\n  }\n\n  onForceReconnectClicked = async () => {\n    await appController.setup();\n  }\n\n  onLimitChange = async (limit: number) => {\n    this.setState({\n      limit\n    });\n  }\n\n  onBlocksPerDayChange = async (blocksPerDay: number) => {\n    this.setState({\n      blocksPerDay\n    });\n  }\n\n  onFromChanged = (fromBlockIndex: number) => {\n    this.setState({\n      fromBlockIndex\n    });\n  }\n\n  onToChanged = (toBlockIndex: number) => {\n    this.setState({\n      toBlockIndex\n    });\n  }\n\n  onFromBlockNumberChange = (fromBlockNumber: number) => {\n    this.setState({\n      fromBlockNumber\n    });\n  }\n\n  toBlockNumberChange = (toBlockNumber: number) => {\n    this.setState({\n      toBlockNumber\n    });\n  }\n\n  getFromBlock = () => {\n    if (this.state.fromBlockIndex !== 3) {\n      return blockOptions[this.state.fromBlockIndex];\n    }\n    return this.state.fromBlockNumber;\n  }\n\n  getToBlock = () => {\n    if (this.state.toBlockIndex !== 3) {\n      return blockOptions[this.state.toBlockIndex];\n    }\n    return this.state.toBlockNumber;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './view/app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}